Створення потоків

Можна відокремити кілька підходів до опису та створення потоків [5]:
- за допомогою використання спеціальних класів (модулів), які безпосередньо
дозволяють описати дії та властивості потоку (Java, Ada);
- за допомогою потокових функцій, коли дії потоку задаються за допомогою
функції, яка визначатиме поведінку потоку (C#, WinAPI);
- за допомогою виділення у послідовній програмі ділянок, які виконуватимуться
паралельно (OpenMP);
- за допомогою створення копії всієї програми та паралельного виконання цих
копій (MPI, PVM).
Додаткові можливості забезпечує об'єднання потоків у групи (пули) та
використання черг різного виду, які дозволяють оптимізувати процес виконання
потоків (Java, Python, Ada, C#, MPI).
Кожен підхід має свої переваги, мета яких - спростити розробку паралельної
програми, її налагодження, модифікацію. Масштабування програми має дозволити
змінювати (статично чи динамічно) кількість потоків, і навіть визначати особливості
виконання.
Нижче наведено підхід до створення (опису) потоку масштабованої програми в
мові Ada. Його особливістю є опис потоку як спеціального типу, а також використання
дискримінанта (конструктора). Тип дозволяє створювати нові потоки (масиви потоків),
а дискримінант – визначати особливості виконання кожного потоку залежно від
значення параметра Idn:
task type T_Type(Idn: integer) is
pragma Priority(7); -- пріоритет потоку
pragma Stack_Size (1000); -- розмір стека потоку
entry Send_Т2(X: in integer); -- засіб взаємодії потоку
end T_Type;
T1: T_Type2(10); -- одиночний потік
T100 is array (1..100) of T_Type(s); -- масив потоків.