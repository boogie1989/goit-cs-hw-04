Завдання взаємного виключення

Вирішення завдання взаємного виключення передбачає контроль потоків при
зверненні до загального ресурсу або контроль безпосередньо загального ресурсу [3, 5].
Перший вид контролю забезпечують семафори, мютекси, критичні секції, другий -
монітори.
Семафори та мютекси представлені практично у всіх мовах та бібліотеках.
Відмінності в реалізації незначні, пов'язані, як правило, з вибором типу семафору
(бінарні або множинні) та його значень (логічні чи цілі), Масштабованість
низькорівневих засобів ґрунтується на створенні додаткових семафорів, а також зміні
безліч їх значень. Тут можливе використання масивів семафорів, що не завжди
підтримується мовами або бібліотеками.
Важливо пам'ятати, що механізми семафорів і мютексів є джерелом тупиків,
оскільки ґрунтується на операціях блокування потоків. Крім того, небезпеку
створюють дії, пов'язані з переповненням допустимих значень семафорів. Все це
вимагає ретельного контролю при використанні семафорів з боку розробника.
Критичні секції позбавлені недоліків семафорів та мютексів, що забезпечує
більш надійний механізм вирішення завдання взаємного виключення. Реалізація
механізму широко представлена у вигляді критичних секцій (WinAPI), синхронізованих
блоків (Java), класу monitor С#. lock – конструкцій (C#, Python) [2, 4]. Однак їх
використання для систем, що масштабуються, може викликати певні труднощі з точки
зору їх тиражування для нових потоків і ресурсів.
Механізм моніторів забезпечує високорівневий підхід до вирішення завдання
взаємного виключення в системах, що масштабуються. Монітор - програмний модуль,
що інкапсулює загальний ресурс, що забезпечує його надійний захист. Особливий
доступ до загального ресурсу забезпечують процедури монітора, які мають
взаємовиключні властивості.
Найбільш ефективна реалізація концепції монітора виконана у мові Ада, де
монітор представлений спеціальною мовною конструкцією – захищеним модулем
(типом) protected [5]. Важливо, що захищений модуль дозволяє вирішувати як завдання
взаємного виключення, так і завдання синхронізації. Для цього використовуються три
види захищених операцій, які оптимізують дії з загальним ресурсом. Наявність у
захищених входах спеціальних конструкцій - бар'єрів дозволяє реалізувати умовний
доступ до загального ресурсу. Особливості масштабування забезпечуються через
розміщення загального ресурсу в окремому модулі, описаному через захищений тип.
Можливість керування чергами, що формуються при доступі до загальних ресурсів,
також створюють передумови для оптимізації їх використання.
В мові Java відсутній певний клас-монітор. При побудові монітора інкапсуляцію
загального ресурсу забезпечує модифікатор private, а взаємовиключний доступом до
загального ресурсу - методи монітора з модифікатором synchronized.
Монітори дозволяють ефективно розробляти масштабовані програми, які можна
налаштовувати на потрібну кількість процесорів у системі. Використання концепції
моніторів набуло розвитку у мовах через появу вже готових моніторів. Прикладом
такого монітора є клас AtomicInteger, який містить цілочисельну змінну і надає через
методи класу понад двадцять атомарних операцій над нею [3].
Ще одним механізмом, що забезпечує роботу із загальними ресурсами, є
використання atomic/volatile прагм, змінних та класів (С#, Ada, Java, Python).